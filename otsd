#!/usr/bin/python3
# Copyright (C) 2012 Peter Todd <pete@petertodd.org>
#
# This file is part of the OpenTimestamps Server.
#
# It is subject to the license terms in the LICENSE file found in the top-level
# directory of this distribution and at http://opentimestamps.org
#
# No part of the OpenTimestamps Server, including this file, may be copied,
# modified, propagated, or distributed except according to the terms contained
# in the LICENSE file.

import argparse
import logging
import os
import sys

from wsgiref.simple_server import make_server
from wsgiref.util import setup_testing_defaults

import opentimestamps.client

import otsserver

from otsserver.rpc import WsgiInterface
from otsserver.bitcoin import BitcoinCalendar


parser = argparse.ArgumentParser(description="OpenTimestamps server.")

parser.add_argument("--version",action="version",version=otsserver.implementation_identifier)
parser.add_argument("-q","--quiet",action="count",
                             help="Be more quiet.")
parser.add_argument("-v","--verbose",action="count",
                             help="Be more verbose. Both -v and -q may be used multiple times.")
parser.add_argument("-c","--config",action="store",default="~/.otsserver/config",
                        help="Location of config file. Defaults to: ~/.otsserver/config")
parser.add_argument("-d","--data",action="store",default="~/.otsserver/",
        help="Location to store data in.")
parser.add_argument("--bind",action="store",default="localhost",
                             help="Bind to a specific address")
parser.add_argument("-p","--port",action="store",default=2302,type=int,
                             help="Port, defaults to 2302")
parser.add_argument("--metadata-url", action="store", default="http://localhost:2302",
                             help="URL used for metadata")
parser.add_argument("--log",action="store",default='WARNING',
                             help="Set log level")

args = parser.parse_args()
logging.root.setLevel(args.log)

context = opentimestamps.client.Context(args.config)

args.data = os.path.expanduser(os.path.normpath(args.data))
if not os.path.exists(args.data):
    os.mkdir(args.data)

calendar_dir = args.data + '/calendar'

create = False
if not os.path.exists(calendar_dir):
    create = True

calendar = BitcoinCalendar(calendar_dir, args.metadata_url, context=context)

wsgi_interface = WsgiInterface(calendar=calendar)
httpd = make_server(args.bind, args.port, wsgi_interface)
httpd.serve_forever()
