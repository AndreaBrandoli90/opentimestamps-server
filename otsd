#!/usr/bin/env python3
# Copyright (C) 2016 The OpenTimestamps developers
#
# This file is part of the OpenTimestamps Server.
#
# It is subject to the license terms in the LICENSE file found in the top-level
# directory of this distribution.
#
# No part of the OpenTimestamps Server, including this file, may be copied,
# modified, propagated, or distributed except according to the terms contained
# in the LICENSE file.

import sys
sys.path.insert(1, sys.path[0] + '/python-opentimestamps/')

import argparse
import logging
import os
import queue

import bitcoin
import bitcoin.core

import otsserver.calendar
import otsserver.rpc
import otsserver.stamper

parser = argparse.ArgumentParser(description="OpenTimestamps Server")

parser.add_argument("-q", "--quiet", action="count", default=0,
                    help="Be more quiet.")
parser.add_argument("-v", "--verbose", action="count", default=0,
                    help="Be more verbose. Both -v and -q may be used multiple times.")
parser.add_argument("-c", "--calendar", type=str,
                    dest='calendar_path',
                    default='~/.otsd/calendar/',
                    help="Location of the calendar")

parser.add_argument("--btc-min-relay-feerate", metavar='FEEPERKB', type=float,
                    default=0.00001,
                    help="Minimum relay feerate")
parser.add_argument("--btc-min-confirmations", metavar='N', type=int,
                    default=6,
                    help="Confirmations required before we save a Bitcoin timestamp permanently")
parser.add_argument("--btc-min-tx-interval", metavar='SECS', type=int,
                    default=600,
                    help="Minimum interval between timestamp transactions")
parser.add_argument("--btc-max-fee", metavar='FEE', type=float,
                    default=0.001,
                    help="Maximum fee per timestamp transaction")

btc_net_group  = parser.add_mutually_exclusive_group()
btc_net_group.add_argument('--btc-testnet', dest='btc_net', action='store_const',
                    const='testnet', default='mainnet',
                    help='Use Bitcoin testnet rather than mainnet')
btc_net_group.add_argument('--btc-regtest', dest='btc_net', action='store_const',
                    const='regtest',
                    help='Use Bitcoin regtest rather than mainnet')

args = parser.parse_args()
args.parser = parser


args.verbosity = args.verbose - args.quiet

if args.verbosity == 0:
    logging.root.setLevel(logging.INFO)
elif args.verbosity > 0:
    logging.root.setLevel(logging.DEBUG)
elif args.verbosity == -1:
    logging.root.setLevel(logging.WARNING)
elif args.verbosity < -1:
    logging.root.setLevel(logging.ERROR)

if args.btc_net == 'testnet':
   bitcoin.SelectParams('testnet')
elif args.btc_net == 'regtest':
   bitcoin.SelectParams('regtest')


calendar_path = os.path.expanduser(args.calendar_path)

calendar = otsserver.calendar.Calendar(calendar_path)
aggregator = otsserver.calendar.Aggregator(calendar)

stamper = otsserver.stamper.Stamper(calendar,
                                    args.btc_min_relay_feerate / 1000 * bitcoin.core.COIN,
                                    args.btc_min_confirmations,
                                    args.btc_min_tx_interval,
                                    args.btc_max_fee * bitcoin.core.COIN)

server = otsserver.rpc.StampServer(('', 14788), aggregator, calendar)
server.serve_forever()

# vim:syntax=python filetype=python
