* Calendars

BitTorrent for calendar downloads

** MerkleDag

Right now we're working towards single-instance "tips" implementation, but can
the tips be decentralized in itself? Thought experiment: take one tips
calendar, make a copy of it, update each independently. Is there a sane way to
merge the two together again? May be helpful for running distributed server
farms for instance.

* Serialization

Naming convention:

d_foo - read as digest input foo

Have one class for anything that either has a digest, or contributes to one.
Default behavior of this class would be to take all the attributes, serialize
them, and call that the digest. Hash is then a special case; Verify is not a
special case. Digest is still a special case I guess; could have d_digest...

** Compression

On serialization create a stack of all intermediate bytes created, namely from
digests, and replace them with relative stack indexes.


* Notaries

MUST support any valid urn for identifier


Internally just put the method version into the method name:

pgp -> pgp_v1

Advantages: less going over the wire, makes searching for notaries purely a
matter of name:identity

* Security

Need to protect against people putting junk in the calendar? are we unable to
directly accept digests, need to at least hash with some random text?

We can always null it out for our purposes, but the real issue is that we'll
wind up giving other client the digests that totally different clients
submitted.
