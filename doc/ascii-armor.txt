come up with a pgp-cleansign-like format:

-----BEGIN OTS TIMESTAMPED MESSAGE-----

[...]
-----BEGIN OTS TIMESTAMP-----
Version: OpenTimestamps v0.1
Comment: For info see https://opentimestamps.org

[ASCII armored]
-----END OTS TIMESTAMP-----

PGP format: http://www.ietf.org/rfc/rfc2440.txt section 7

'Version' key is intended to be for debugging and informational, not parsed,
binary format already has version info in it

Don't need "Hash" specifier.

base-64 encoding as per rfc3548. (default python base64) if we're going to use
ASCII armoring here, why not use it for everything?

note the armor checksum, not required as binary serialization already has a
crc32 checksum

section 6.2 notes the Charset header key, and that utf8 is assumed, lets keep
with this and drop other charset support, not that "An implementation MAY
implement this key"

the trailing whitespace, says "(spaces, tabs and 0x09)", is this unicode aware?

line endings, what exactly is considered a line ending? oddball stuff like
<CR>, <LF><CR> etc?

PGP supports some complex MessageID semantics, lets leave those out, not relevant these days


use this for all timestamps, with "json_decode" as a client? thus we would have:

-----BEGIN OTS TIMESTAMP-----
Version: OpenTimestamps v0.1
Comment: For info see https://opentimestamps.org

[ASCII armored]
-----END OTS TIMESTAMP-----
